# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:15:39+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Optional

from pydantic import BaseModel, Field, RootModel, constr


class ClientLimitExceededException(RootModel[Any]):
    root: Any


class ConnectionLimitExceededException(RootModel[Any]):
    root: Any


class ContentType(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\.\-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\.\-]+$', min_length=1, max_length=128)


class ContinuationToken(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\.\-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\.\-]+$', min_length=1, max_length=128)


class FragmentNumberString(
    RootModel[constr(pattern=r'^[0-9]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[0-9]+$', min_length=1, max_length=128)


class InvalidArgumentException(RootModel[Any]):
    root: Any


class InvalidEndpointException(RootModel[Any]):
    root: Any


class NotAuthorizedException(RootModel[Any]):
    root: Any


class Payload(RootModel[str]):
    root: str


class ResourceARN(
    RootModel[
        constr(
            pattern=r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
        min_length=1,
        max_length=1024,
    )


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class StartSelectorType(Enum):
    FRAGMENT_NUMBER = 'FRAGMENT_NUMBER'
    SERVER_TIMESTAMP = 'SERVER_TIMESTAMP'
    PRODUCER_TIMESTAMP = 'PRODUCER_TIMESTAMP'
    NOW = 'NOW'
    EARLIEST = 'EARLIEST'
    CONTINUATION_TOKEN = 'CONTINUATION_TOKEN'


class StreamName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class Timestamp(RootModel[datetime]):
    root: datetime


class StartSelector1(BaseModel):
    AfterFragmentNumber: Optional[FragmentNumberString] = None
    ContinuationToken_1: Optional[ContinuationToken] = Field(
        None, alias='ContinuationToken'
    )
    StartSelectorType_1: Optional[StartSelectorType] = Field(
        None, alias='StartSelectorType'
    )
    StartTimestamp: Optional[Timestamp] = None


class GetMediaPostRequest(BaseModel):
    StartSelector: StartSelector1 = Field(
        ...,
        description="<p>Identifies the chunk on the Kinesis video stream where you want the <code>GetMedia</code> API to start returning media data. You have the following options to identify the starting chunk: </p> <ul> <li> <p>Choose the latest (or oldest) chunk.</p> </li> <li> <p>Identify a specific chunk. You can identify a specific chunk either by providing a fragment number or timestamp (server or producer). </p> </li> <li> <p>Each chunk's metadata includes a continuation token as a Matroska (MKV) tag (<code>AWS_KINESISVIDEO_CONTINUATION_TOKEN</code>). If your previous <code>GetMedia</code> request terminated, you can use this tag value in your next <code>GetMedia</code> request. The API then starts returning chunks starting where the last API ended.</p> </li> </ul>",
    )
    StreamARN: Optional[
        constr(
            pattern=r'arn:aws:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ] = Field(
        None,
        description="The ARN of the stream from where you want to get the media content. If you don't specify the <code>streamARN</code>, you must specify the <code>streamName</code>.",
    )
    StreamName: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description="The Kinesis video stream name from where you want to get the media content. If you don't specify the <code>streamName</code>, you must specify the <code>streamARN</code>.",
    )


class GetMediaOutput(BaseModel):
    Payload_1: Optional[Payload] = Field(None, alias='Payload')


class StartSelector(BaseModel):
    AfterFragmentNumber: Optional[FragmentNumberString] = None
    ContinuationToken_1: Optional[ContinuationToken] = Field(
        None, alias='ContinuationToken'
    )
    StartSelectorType_1: StartSelectorType = Field(..., alias='StartSelectorType')
    StartTimestamp: Optional[Timestamp] = None


class GetMediaInput(BaseModel):
    StartSelector_1: StartSelector = Field(..., alias='StartSelector')
    StreamARN: Optional[ResourceARN] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
